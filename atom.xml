<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周延年的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhouyannian.com/"/>
  <updated>2021-09-25T09:40:36.102Z</updated>
  <id>https://zhouyannian.com/</id>
  
  <author>
    <name>zhouyn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring 解决循环依赖必须要三级缓存吗？</title>
    <link href="https://zhouyannian.com/2021/09/23/spring-level-3-cache/"/>
    <id>https://zhouyannian.com/2021/09/23/spring-level-3-cache/</id>
    <published>2021-09-23T13:05:07.000Z</published>
    <updated>2021-09-25T09:40:36.102Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2021-09-23/start.webp" alt><br>转载自:<a href="https://juejin.cn/post/6882266649509298189" target="_blank" rel="noopener">https://juejin.cn/post/6882266649509298189</a></p><p>我们都知道 Spring 是通过三级缓存来解决循环依赖的，但是解决循环依赖真的需要使用到三级缓冲吗？只使用两级缓存是否可以呢？本篇文章就 Spring 是如何使用三级缓存解决循环依赖作为引子，验证两级缓存是否可以解决循环依赖。</p><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p>既然要解决循环依赖，那么就要知道循环依赖是什么。如下图所示：<br><img src="/images/2021-09-23/1.png" alt><br>通过上图，我们可以看出：<br>A 依赖于 B<br>B 依赖于 C<br>C 依赖于 A<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    private B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class B &#123;</span><br><span class="line">    private C c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class C &#123;</span><br><span class="line">    private A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种依赖关系形成了一种闭环，从而造成了循环依赖的局面。<br>下面是未解决循环依赖的常规步骤：</p><p>1、实例化 A，此时 A 还未完成属性填充和初始化方法（@PostConstruct）的执行。<br>2、A 对象发现需要注入 B 对象，但是容器中并没有 B 对象（如果对象创建完成并且属性注入完成和执行完初始化方法就会放入容器中）。<br>3、实例化 B，此时 B 还未完成属性填充和初始化方法（@PostConstruct）的执行。<br>4、B 对象发现需要注入 C 对象，但是容器中并没有 C 对象。<br>5、实例化 C，此时 C 还未完成属性填充和初始化方法（@PostConstruct）的执行。<br>6、C 对象发现需要注入 A 对象，但是容器中并没有 A 对象。<br>7、重复步骤 1。</p><h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><p>Spring 解决循环依赖的核心就是提前暴露对象，而提前暴露的对象就是放置于第二级缓存中。下表是三级缓存的说明：</p><ul><li>singletonObjects：一级缓存，存放完整的 Bean。 </li><li>earlySingletonObjects    ：二级缓存，存放提前暴露的Bean，Bean 是不完整的，未完成属性注入和执行 init 方法。</li><li>singletonFactories：三级缓存，存放的是 Bean 工厂，主要是生产 Bean，存放到二级缓存中。 </li></ul><p>所有被 Spring 管理的 Bean，最终都会存放在 singletonObjects 中，这里面存放的 Bean 是经历了所有生命周期的（除了销毁的生命周期），完整的，可以给用户使用的。<br>earlySingletonObjects 存放的是已经被实例化，但是还没有注入属性和执行 init 方法的 Bean。<br>singletonFactories 存放的是生产 Bean 的工厂。<br>Bean 都已经实例化了，为什么还需要一个生产 Bean 的工厂呢？这里实际上是跟 AOP 有关，如果项目中不需要为 Bean 进行代理，那么这个 Bean 工厂就会直接返回一开始实例化的对象，如果需要使用 AOP 进行代理，那么这个工厂就会发挥重要的作用了，这也是本文需要重点关注的问题之一。</p><h2 id="解决循环依赖"><a href="#解决循环依赖" class="headerlink" title="解决循环依赖"></a>解决循环依赖</h2><p>Spring 是如何通过上面介绍的三级缓存来解决循环依赖的呢？这里只用 A，B 形成的循环依赖来举例：</p><p>1、实例化 A，此时 A 还未完成属性填充和初始化方法（@PostConstruct）的执行，A 只是一个半成品。<br>2、为 A 创建一个 Bean 工厂，并放入到  singletonFactories 中。<br>3、发现 A 需要注入 B 对象，但是一级、二级、三级缓存均为发现对象 B。<br>4、实例化 B，此时 B 还未完成属性填充和初始化方法（@PostConstruct）的执行，B 只是一个半成品。<br>5、为 B 创建一个 Bean 工厂，并放入到  singletonFactories 中。<br>6、发现 B 需要注入 A 对象，此时在一级、二级未发现对象 A，但是在三级缓存中发现了对象 A，从三级缓存中得到对象 A，并将对象 A 放入二级缓存中，同时删除三级缓存中的对象 A。（注意，此时的 A 还是一个半成品，并没有完成属性填充和执行初始化方法）<br>7、将对象 A 注入到对象 B 中。<br>8、对象 B 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 B。（此时对象 B 已经是一个成品）<br>9、对象 A 得到对象 B，将对象 B 注入到对象 A 中。（对象 A 得到的是一个完整的对象 B）<br>10、对象 A 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 A。</p><p>我们从源码中来分析整个过程：<br>创建 Bean 的方法在 <code>AbstractAutowireCapableBeanFactory::doCreateBean()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123;</span><br><span class="line">    BeanWrapper instanceWrapper = null;</span><br><span class="line"></span><br><span class="line">    if (instanceWrapper == null) &#123;</span><br><span class="line">        // ① 实例化对象</span><br><span class="line">        instanceWrapper = this.createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final Object bean = instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null;</span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper != null ? instanceWrapper.getWrappedClass() : null;</span><br><span class="line">   </span><br><span class="line">    // ② 判断是否允许提前暴露对象，如果允许，则直接添加一个 ObjectFactory 到三级缓存</span><br><span class="line">boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class="line">isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    if (earlySingletonExposure) &#123;</span><br><span class="line">        // 添加三级缓存的方法详情在下方</span><br><span class="line">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ③ 填充属性</span><br><span class="line">    this.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">    // ④ 执行初始化方法，并创建代理</span><br><span class="line">    exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">   </span><br><span class="line">    return exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加三级缓存的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected void addSingletonFactory(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">    Assert.notNull(singletonFactory, &quot;Singleton factory must not be null&quot;);</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        if (!this.singletonObjects.containsKey(beanName)) &#123; // 判断一级缓存中不存在此对象</span><br><span class="line">            this.singletonFactories.put(beanName, singletonFactory); // 添加至三级缓存</span><br><span class="line">            this.earlySingletonObjects.remove(beanName); // 确保二级缓存没有此对象</span><br><span class="line">            this.registeredSingletons.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface ObjectFactory&lt;T&gt; &#123;</span><br><span class="line">T getObject() throws BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过这段代码，我们可以知道 Spring 在实例化对象的之后，就会为其创建一个 Bean 工厂，并将此工厂加入到三级缓存中。</p><blockquote><p><strong>因此，Spring 一开始提前暴露的并不是实例化的 Bean，而是将 Bean 包装起来的 ObjectFactory。为什么要这么做呢？</strong></p></blockquote><p>这实际上涉及到 AOP，如果创建的 Bean 是有代理的，那么注入的就应该是代理 Bean，而不是原始的 Bean。但是 Spring 一开始并不知道 Bean 是否会有循环依赖，通常情况下（没有循环依赖的情况下），Spring 都会在完成填充属性，并且执行完初始化方法之后再为其创建代理。但是，如果出现了循环依赖的话，Spring 就不得不为其提前创建代理对象，否则注入的就是一个原始对象，而不是代理对象。因此，这里就涉及到应该在哪里提前创建代理对象？<br>Spring 的做法就是在 ObjectFactory 中去提前创建代理对象。它会执行 <code>getObject()</code> 方法来获取到 Bean。实际上，它真正执行的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) &#123;</span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            if (bp instanceof SmartInstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                // 如果需要代理，这里会返回代理对象；否则返回原始对象</span><br><span class="line">                exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为提前进行了代理，避免对后面重复创建代理对象，会在 <code>earlyProxyReferences</code> 中记录已被代理的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport</span><br><span class="line">implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object getEarlyBeanReference(Object bean, String beanName) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        // 记录已被代理的对象</span><br><span class="line">        this.earlyProxyReferences.put(cacheKey, bean);</span><br><span class="line">        return wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>通过上面的解析，我们可以知道 Spring 需要三级缓存的目的是为了在没有循环依赖的情况下，延迟代理对象的创建，使 Bean 的创建符合 Spring 的设计原则。</strong></p></blockquote><h2 id="如何获取依赖"><a href="#如何获取依赖" class="headerlink" title="如何获取依赖"></a>如何获取依赖</h2><p>我们目前已经知道了 Spring 的三级依赖的作用，但是 Spring 在注入属性的时候是如何去获取依赖的呢？</p><p>他是通过一个 <code>getSingleton()</code> 方法去获取所需要的 Bean 的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">    // 一级缓存</span><br><span class="line">    Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        synchronized (this.singletonObjects) &#123;</span><br><span class="line">            // 二级缓存</span><br><span class="line">            singletonObject = this.earlySingletonObjects.get(beanName);</span><br><span class="line">            if (singletonObject == null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                // 三级缓存</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);</span><br><span class="line">                if (singletonFactory != null) &#123;</span><br><span class="line">                    // Bean 工厂中获取 Bean</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    // 放入到二级缓存中</span><br><span class="line">                    this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    this.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当 Spring 为某个 Bean 填充属性的时候，它首先会寻找需要注入对象的名称，然后依次执行 <code>getSingleton()</code> 方法得到所需注入的对象，而获取对象的过程就是先从一级缓存中获取，一级缓存中没有就从二级缓存中获取，二级缓存中没有就从三级缓存中获取，如果三级缓存中也没有，那么就会去执行 <code>doCreateBean()</code> 方法创建这个 Bean。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>我们现在已经知道，第三级缓存的目的是为了延迟代理对象的创建，因为如果没有依赖循环的话，那么就不需要为其提前创建代理，可以将它延迟到初始化完成之后再创建。<br>既然目的只是延迟的话，那么我们是不是可以不延迟创建，而是在实例化完成之后，就为其创建代理对象，这样我们就不需要第三级缓存了。因此，我们可以将<code>addSingletonFactory()</code>方法进行改造。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void addSingletonFactory(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">    Assert.notNull(singletonFactory, &quot;Singleton factory must not be null&quot;);</span><br><span class="line">    synchronized (this.singletonObjects) &#123;</span><br><span class="line">        if (!this.singletonObjects.containsKey(beanName)) &#123; // 判断一级缓存中不存在此对象</span><br><span class="line">            object o = singletonFactory.getObject(); // 直接从工厂中获取 Bean</span><br><span class="line">            this.earlySingletonObjects.put(beanName, o); // 添加至二级缓存中</span><br><span class="line">            this.registeredSingletons.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的话，每次实例化完 Bean 之后就直接去创建代理对象，并添加到二级缓存中。测试结果是完全正常的，Spring 的初始化时间应该也是不会有太大的影响，因为如果 Bean 本身不需要代理的话，是直接返回原始 Bean 的，并不需要走复杂的创建代理 Bean 的流程。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>测试证明，二级缓存也是可以解决循环依赖的。为什么 Spring 不选择二级缓存，而要额外多添加一层缓存呢？<br>如果 Spring 选择二级缓存来解决循环依赖的话，那么就意味着所有 Bean 都需要在实例化完成之后就立马为其创建代理，而 Spring 的设计原则是在 Bean 初始化完成之后才为其创建代理。所以，Spring 选择了三级缓存。但是因为循环依赖的出现，导致了 Spring 不得不提前去创建代理，因为如果不提前创建代理对象，那么注入的就是原始对象，这样就会产生错误。</p><p><strong>下面是一些自己的总结：</strong></p><blockquote><p>通过debug源码发现，第三级缓存里面存放的是<code>singletonFactory</code>，所以如果只有两级缓存的话，二级缓存放的就应该是调用<code>singletonFactory.getObject()</code>拿到的bean。到这里，假如不存在AOP的话是完全没有问题的，如果存在AOP，那么二级缓存里面放的就必须是代理后的bean，因为Spring事先并不知道是否存在循环依赖，所以只能都放代理后的bean（循环依赖的情况下必须提前创建代理对象），这个时候问题就来了，如果不存在循环依赖，又提前创建了代理对象，就不符合Spring延迟创建代理对象的设计原则了，这个问题二级缓存是没办法解决的，必须依赖三级缓存。<br>通过源码也可以看到<code>getEarlyBeanReference</code>这个方法，只有在存在循环依赖的情况下，这个方法才会被调用，而提前创建代理对象正是在这里创建的，所以三级缓存完美的解决了这个问题。<br>以上是自己看完以后的一些总结，如果有误，欢迎大家指正！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2021-09-23/start.webp&quot; alt&gt;&lt;br&gt;转载自:&lt;a href=&quot;https://juejin.cn/post/6882266649509298189&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="Spring" scheme="https://zhouyannian.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://zhouyannian.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Exception和Error有什么区别？</title>
    <link href="https://zhouyannian.com/2020/03/14/exception-and-error/"/>
    <id>https://zhouyannian.com/2020/03/14/exception-and-error/</id>
    <published>2020-03-14T11:31:07.000Z</published>
    <updated>2020-03-14T11:32:42.550Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-07-24-start.jpg" alt></p><ul><li><p>Exception 和 Error 都是继承了 Throwable 类，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。</p></li><li><p>Exception 和 Error 体现了 Java 平台设计者对不同异常情况的分类。Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。</p></li><li><p>Error 是指在正常情况下，不大可能出现的情况，绝大部分的 Error 都会导致程序（比如 JVM 自身）处于非正常的、不可恢复状态。既然是非正常情况，所以不便于也不需要捕获，常见的比如 OutOfMemoryError 之类，都是 Error 的子类。</p></li><li><p>Exception 又分为<strong>可检查</strong>（checked）异常和<strong>不检查</strong>（unchecked）异常，可检查异常在源代码里必须显式地进行捕获处理，这是编译期检查的一部分。前面我介绍的不可查的 Error，是 Throwable 不是 Exception。</p></li><li><p>不检查异常就是所谓的运行时异常，类似 NullPointerException、ArrayIndexOutOfBoundsException 之类，通常是可以编码避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译期强制要求。</p></li></ul><h3 id="实践中的一些经验："><a href="#实践中的一些经验：" class="headerlink" title="实践中的一些经验："></a>实践中的一些经验：</h3><ol><li>尽量不要捕获类似 Exception 这样的通用异常，而是应该捕获特定异常，这是因为在日常的开发和合作中，我们读代码的机会往往超过写代码，软件工程是门协作的艺术，所以我们有义务让自己的代码能够直观地体现出尽量多的信息，而泛泛的 Exception 之类，恰恰隐藏了我们的目的。另外，我们也要保证程序不会捕获到我们不希望捕获的异常。比如，你可能更希望 RuntimeException 被扩散出来，而不是被捕获。进一步讲，除非深思熟虑了，否则不要捕获 Throwable 或者 Error，这样很难保证我们能够正确程序处理 OutOfMemoryError。</li><li>不要生吞（swallow）异常。这是异常处理中要特别注意的事情，因为很可能会导致非常难以诊断的诡异情况。生吞异常，往往是基于假设这段代码可能不会发生，或者感觉忽略异常是无所谓的，但是千万不要在产品代码做这种假设！</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-07-24-start.jpg&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exception 和 Error 都是继承了 Throwable 类，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或
      
    
    </summary>
    
      <category term="Java" scheme="https://zhouyannian.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://zhouyannian.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何用较少的代码实现一个死锁？</title>
    <link href="https://zhouyannian.com/2020/02/28/deadLock/"/>
    <id>https://zhouyannian.com/2020/02/28/deadLock/</id>
    <published>2020-02-28T14:39:07.000Z</published>
    <updated>2020-03-08T13:20:42.638Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2020-02-28/start.jpg" alt></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>死锁是面试中经常会被问到的一个问题，对于什么是死锁，大家肯定早已经烂熟于心了，但是如果面试官让你现场写一段死锁的代码，估计很多人就有点慌了。<br>毕竟记住了概念是一回事，能自己写出来又是另一回事。<br>前几天在看一个JVM视频的时候，发现一个例子写的很好，理解起来也很简单，给大家分享一下：<br><img src="/images/2020-02-28/code.png" alt></p><p>这个逻辑很简单，新建了两个类A和B，有两个相同的方法method()，逻辑也很简单，就输出一句话，然后调用另一个类的method()方法，为了达到理想的效果，让持有该锁的线程休眠了5秒。<br>main函数里面，启动了两个线程去分别调用类A的method方法和类B的method方法，这里用到了Lambda表达式。当第一个线程进入类A的method方法后，休眠了5秒之后，准备去调用类B的method方法，此时，类B的Class对象的锁被另一个线程锁持有，只能等待。与此同时，第二个线程也执行了相同的操作，想要去获取类A的Class对象的锁，然后发现锁已被第一个线程持有，也进入了等待的状态。<br>这样，两个线程就在互相等待对方释放锁，而进入了永久循环的状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2020-02-28/start.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;死锁是面试中经常会被问到的一个问题，
      
    
    </summary>
    
      <category term="JVM" scheme="https://zhouyannian.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://zhouyannian.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈Java的“一次编译、到处运行”</title>
    <link href="https://zhouyannian.com/2019/07/23/write-once-run-anywhere/"/>
    <id>https://zhouyannian.com/2019/07/23/write-once-run-anywhere/</id>
    <published>2019-07-23T15:39:07.000Z</published>
    <updated>2019-07-24T14:42:48.626Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-07-23/start.jpg" alt></p><ul><li><p><strong>“一次编译、到处运行”</strong>说的是Java语言跨平台的特性，Java的跨平台特性与Java虚拟机的存在密不可分，可在不同的环境中运行。比如说Windows平台和Linux平台都有相应的JDK，安装好JDK后也就有了Java语言的运行环境。其实Java语言本身与其他的编程语言没有特别大的差异，并不是说Java语言可以跨平台，而是在不同的平台都有可以让Java语言运行的环境而已，所以才有了Java一次编译，到处运行这样的效果。</p></li><li><p>严格的讲，跨平台的语言不止Java一种，但Java是较为成熟的一种。<strong>“一次编译，到处运行”</strong>这种效果跟编译器有关。编程语言的处理需要编译器和解释器。Java虚拟机和DOS类似，相当于一个供程序运行的平台。</p></li><li><p>程序从源代码到运行的三个阶段：<strong>编码——编译——运行——调试</strong>。Java在编译阶段则体现了跨平台的特点。编译过程大概是这样的：首先是将Java源代码转化成.CLASS文件字节码，这是第一次编译。.class文件就是可以到处运行的文件。然后Java字节码会被转化为目标机器代码，这是是由JVM来执行的，即Java的第二次编译。</p></li><li><p><strong>“到处运行”</strong>的关键和前提就是JVM。因为在第二次编译中JVM起着关键作用。在可以运行Java虚拟机的地方都内含着一个JVM操作系统。从而使JAVA提供了各种不同平台上的虚拟机制，因此实现了“到处运行”的效果。需要强调的一点是，java并不是编译机制，而是解释机制。Java字节码的设计充分考虑了JIT这一即时编译方式，可以将字节码直接转化成高性能的本地机器码，这同样是虚拟机的一个构成部分。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-07-23/start.jpg&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“一次编译、到处运行”&lt;/strong&gt;说的是Java语言跨平台的特性，Java的跨平台特性与Java虚拟机的存在密不可分，可在不同的环
      
    
    </summary>
    
      <category term="Java" scheme="https://zhouyannian.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://zhouyannian.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-generator生成代码时报错：Could not create connection to database server.</title>
    <link href="https://zhouyannian.com/2019/04/23/mybatis-generator-report-error/"/>
    <id>https://zhouyannian.com/2019/04/23/mybatis-generator-report-error/</id>
    <published>2019-04-23T13:05:07.000Z</published>
    <updated>2019-04-23T15:06:35.566Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-04-23/start.jpg" alt></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天在写一个小项目的时候，需要用到mybatis-generator来帮我自动生成一些代码，数据库安装的是当时最新的MySQL 8.0.15版本,generatorConfig.xml配置如下:<br><img src="/images/2019-04-23/xml.png" alt><br>运行mybatis-generator的maven plugin的时候，一直报错：Could not create connection to database server.<br><img src="/images/2019-04-23/error.png" alt></p><p>后来通过排查，发现原因是，MySQL8.0之后的版本需要更换驱动为<strong>“com.mysql.cj.jdbc.Driver”</strong>，之前的<strong>“com.mysql.jdbc.Driver”</strong>已经不能在MySQL 8.0之后的版本使用了，官方文档链接：<br><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-api-changes.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-api-changes.html</a></p><p>原文如下：<br><strong><em>The name of the class that implements java.sql.Driver in MySQL Connector/J has changed from com.mysql.jdbc.Driver to com.mysql.cj.jdbc.Driver. The old class name has been deprecated.</em></strong><br>所以，修改以下两个地方就Ok了：</p><h3 id="1-更新pom文件中mysql-connector-java的版本"><a href="#1-更新pom文件中mysql-connector-java的版本" class="headerlink" title="1.更新pom文件中mysql-connector-java的版本"></a>1.更新pom文件中mysql-connector-java的版本</h3><p><img src="/images/2019-04-23/pom.png" alt></p><h3 id="2-更新mybatis-generator配置文件generatorConfig-xml中的驱动："><a href="#2-更新mybatis-generator配置文件generatorConfig-xml中的驱动：" class="headerlink" title="2.更新mybatis-generator配置文件generatorConfig.xml中的驱动："></a>2.更新mybatis-generator配置文件generatorConfig.xml中的驱动：</h3><p><img src="/images/2019-04-23/new_xml.png" alt></p><p>更新之后，再次运行mybatis-generator-maven-plugin，成功生成了dao层接口和mapper文件：<br><img src="/images/2019-04-23/success.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-04-23/start.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天在写一个小项目的时候，需要用到m
      
    
    </summary>
    
      <category term="MyBatis" scheme="https://zhouyannian.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="https://zhouyannian.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化的方式</title>
    <link href="https://zhouyannian.com/2019/04/10/redis-data-persistence/"/>
    <id>https://zhouyannian.com/2019/04/10/redis-data-persistence/</id>
    <published>2019-04-10T13:55:11.000Z</published>
    <updated>2019-04-10T14:42:18.748Z</updated>
    
    <content type="html"><![CDATA[<p>最近面试的时候，几乎每家公司都问到了Redis的持久化问题，回来以后翻了一下资料，发现自己回答的不是很完整，所以来总结一下，加深理解。<br>Redis持久化的方式有两种：</p><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h2><p>RDB（Redis Database）,在指定的时间间隔能对数据进行快照存储,是Redis默认的持久化方式，这种方式是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。<br>可以通过配置设置自动做快照持久化的方式。我们可以配置redis在n秒内如果超过m个key被修改就自动做快照，下面是默认的快照保存配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1     <span class="comment">#900秒内如果超过1个key被修改，则发起快照保存</span></span><br><span class="line">save 300 10    <span class="comment">#300秒内容如超过10个key被修改，则发起快照保存</span></span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></p><h3 id="RDB文件的保存过程"><a href="#RDB文件的保存过程" class="headerlink" title="RDB文件的保存过程"></a>RDB文件的保存过程</h3><ul><li>redis调用fork,现在有了子进程和父进程。</li><li>父进程继续处理client请求，子进程负责将内存内容写入到临时文件。由于os的写时复制机制（copy on write)父子进程会共享相同的物理页面，当父进程处理写请求时os会为父进程要修改的页面创建副本，而不是写共享的页面。所以子进程的地址空间内的数 据是fork时刻整个数据库的一个快照。</li><li>当子进程将快照写入临时文件完毕后，用临时文件替换原来的快照文件，然后子进程退出。</li></ul><p>client 也可以使用save或者bgsave命令通知redis做一次快照持久化。save操作是在主线程中保存快照的，由于redis是用一个主线程来处理所有 client的请求，这种方式会阻塞所有client请求。所以不推荐使用。<br>另一点需要注意的是，每次快照持久化都是将内存数据完整写入到磁盘一次，并不 是增量的只同步脏数据。如果数据量大的话，而且写操作比较多，必然会引起大量的磁盘io操作，可能会严重影响性能。</p><h3 id="RDB的优点"><a href="#RDB的优点" class="headerlink" title="RDB的优点"></a>RDB的优点</h3><ul><li>使用单独子进程来进行持久化，主进程不会进行任何IO操作，保证了redis的高性能。</li><li>数据量比较大的时候，RDB比AOF速度更快。</li><li>一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这样非常方便进行备份。比如你可能打算每隔一天归档一些数据。<h3 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h3></li><li>RDB是间隔一段时间进行持久化，如果持久化之间redis发生故障，会发生数据丢失，数据的准确性不高。虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。在这种情况下，一旦发生故障停机，你就可能会丢失好几分钟的数据，不要觉得这几分钟很短，造成的损失可能是你想不到的，所以如果你对数据的准确性要求比较高，那么你应该选择AOF。</li><li>每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。</li></ul><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h2><p>AOF(Append Only File)，AOF持久化方式记录每次对服务器写的操作,通过write函数追加到文件中(默认是 appendonly.aof)，当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大。<br>我们可以通过配置文件告诉redis我们想要 通过fsync函数强制os写入到磁盘的时机。有三种方式如下（默认是：每秒fsync一次）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes              //启用aof持久化方式</span><br><span class="line">appendfsync always      //每次收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用</span><br><span class="line">appendfsync everysec     //每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐</span><br><span class="line">appendfsync no    //完全依赖os，性能最好,持久化没保证</span><br></pre></td></tr></table></figure></p><p>aof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100就够了。<br>为了压缩aof的持久化文件。redis提供了bgrewriteaof命令。收到此命令redis将使用与快照类似的方式将内存中的数据 以命令的方式保存到临时文件中，最后替换原来的文件。</p><h3 id="AOF文件保存过程"><a href="#AOF文件保存过程" class="headerlink" title="AOF文件保存过程"></a>AOF文件保存过程</h3><ul><li>redis调用fork ，现在有父子两个进程</li><li>子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令</li><li>父进程继续处理client请求，除了把写命令写入到原来的aof文件中。同时把收到的写命令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。</li><li>当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然后父进程把缓存的写命令也写入到临时文件。</li><li>现在父进程可以使用临时文件替换老的aof文件，并重命名，后面收到的写命令也开始往新的aof文件中追加。</li></ul><p>需要注意到是重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件,这点和快照有点类似。</p><h3 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h3><p>可以保持更高的数据完整性，因此已成为主流的持久化方案.</p><h3 id="AOF的缺点"><a href="#AOF的缺点" class="headerlink" title="AOF的缺点"></a>AOF的缺点</h3><p>AOF文件比RDB文件大，且恢复速度慢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近面试的时候，几乎每家公司都问到了Redis的持久化问题，回来以后翻了一下资料，发现自己回答的不是很完整，所以来总结一下，加深理解。&lt;br&gt;Redis持久化的方式有两种：&lt;/p&gt;
&lt;h2 id=&quot;1-RDB&quot;&gt;&lt;a href=&quot;#1-RDB&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Redis" scheme="https://zhouyannian.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://zhouyannian.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MySQL</title>
    <link href="https://zhouyannian.com/2019/04/09/docker-install-mysql/"/>
    <id>https://zhouyannian.com/2019/04/09/docker-install-mysql/</id>
    <published>2019-04-08T16:03:06.000Z</published>
    <updated>2019-04-23T14:09:30.730Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-04-09/start.jpg" alt></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>mysql都已经更新到8了，听说速度比5.X快了不少，正好最近要做一个小项目，就赶紧装个最新的版本来爽一下。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-docker-中下载-mysql"><a href="#2-1-docker-中下载-mysql" class="headerlink" title="2.1 docker 中下载 mysql"></a>2.1 docker 中下载 mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql    <span class="comment">#如果不指定版本，默认是latest</span></span><br></pre></td></tr></table></figure><h3 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=admin -d mysql    <span class="comment">#密码不要抄我的！！！</span></span><br></pre></td></tr></table></figure><h3 id="2-3-进入容器"><a href="#2-3-进入容器" class="headerlink" title="2.3 进入容器"></a>2.3 进入容器</h3><pre><code class="bash">docker <span class="built_in">exec</span> -it mysql bash </code></pre><h3 id="2-4-登录mysql"><a href="#2-4-登录mysql" class="headerlink" title="2.4 登录mysql"></a>2.4 登录mysql</h3><pre><code class="bash">mysql -u root -p ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'admin'</span>; </code></pre><h3 id="2-5-添加远程登录用户"><a href="#2-5-添加远程登录用户" class="headerlink" title="2.5 添加远程登录用户"></a>2.5 添加远程登录用户</h3><pre><code class="bash">CREATE USER <span class="string">'zhouyn'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'admin'</span>; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'zhouyn'</span>@<span class="string">'%'</span>; </code></pre><h2 id="3-安装过程中出现的问题"><a href="#3-安装过程中出现的问题" class="headerlink" title="3. 安装过程中出现的问题"></a>3. 安装过程中出现的问题</h2><p>暂时没出现啥问题，一次安装成功，惊不惊喜？意不意外？<br>先待定，后面出现啥问题再补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-04-09/start.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;mysql都已经
      
    
    </summary>
    
      <category term="Docker" scheme="https://zhouyannian.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://zhouyannian.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://zhouyannian.com/2019/04/08/docker/"/>
    <id>https://zhouyannian.com/2019/04/08/docker/</id>
    <published>2019-04-08T15:26:12.000Z</published>
    <updated>2019-04-23T14:07:35.831Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-04-08/start.jpg" alt></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a><strong>1.前言</strong></h2><p>Docker火了已经有一段时间了，但是因为所在公司的原因，一直没有机会接触到这些新技术，公司主要的业务是电信行业，技术栈也是自己搞的一套，先不说好不好吧，反正我觉得是什么都学不到，当然，也有我自己的问题，虽然公司用的技术比较老，但是只要自己愿意学的话，还是可以学到东西的，但是对着一堆陈年老代码，我实在是没有什么欲望，所以，年后就果断离职了。<br>出来面试了一圈才知道，大家现在都在整springBoot+springCloud这一套了，面试完也拿了几个offer，但自己心仪的几个公司都被拒了，每次面试完都会回去反思一下，入职某信的这半年多时间，在技术上几乎没有任何的沉淀，学到的一些新东西，也是公司自己内部的，外面的公司根本不知道，所以还是庆幸自己早点跳出来了，不然可能时间越长就越没法跳出来了，从我那些同事那就能看的出来，所以也劝大家选行业的时候一定要慎重，对你以后的发展很重要，电信行业已经进入我的黑名单，以后再也不想入这一行了。</p><h2 id="2-关于Docker"><a href="#2-关于Docker" class="headerlink" title="2.关于Docker"></a><strong>2.关于Docker</strong></h2><p>刚才有感而发说了些废话，现在开始说正事吧。关于什么是Docker以及和虚拟机的区别，网上一搜一大堆，我就不再当搬运工了，只要是做这一行的，一看就能明白他俩的区别，Docker能火起来是个必然的趋势，这一点我深有感触，以前配一套环境，要折腾很久，现在分分钟搞定，简直爽歪歪！</p><h2 id="3-Docker的安装"><a href="#3-Docker的安装" class="headerlink" title="3.Docker的安装"></a><strong>3.Docker的安装</strong></h2><p>我用的是macOS和Linux的系统，安装过程很简单，网上的教程也很多，各种OS的都有，大家照着安装就可以了，本文只是做个铺垫，后面会记录一下其他和Docker相关的东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-04-08/start.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.前言&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="https://zhouyannian.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://zhouyannian.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈对Java的理解</title>
    <link href="https://zhouyannian.com/2019/04/06/talk-about-the-undertandng-of-Java/"/>
    <id>https://zhouyannian.com/2019/04/06/talk-about-the-undertandng-of-Java/</id>
    <published>2019-04-05T16:56:15.000Z</published>
    <updated>2019-04-23T14:04:49.335Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-04-06/start.jpg" alt><br>从接触 Java 开发到现在，你觉得你对 Java 最直观的印象是什么？是它宣传的 “Write once, run anywhere”，还是目前看已经有些过于形式主义的语法？</p><ul><li><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2>Java 本身是一种面向对象的语言，最显著的特性有两个方面，一是所谓的“<strong>一次编译，到处运行</strong>”（Write once, run anywhere），能够非常容易地获得跨平台能力；另外就是<strong>垃圾收集</strong>（GC, Garbage Collection），Java 通过垃圾收集器（Garbage Collector）回收分配内存，大部分情况下，程序员不需要自己操心内存的分配和回收。</li><li><h2 id="JRE-amp-JDK"><a href="#JRE-amp-JDK" class="headerlink" title="JRE&amp;JDK"></a>JRE&amp;JDK</h2>我们日常会接触到 JRE（Java Runtime Environment）或者 JDK（Java Development Kit）。 JRE，也就是 Java 运行环境，包含了 JVM 和 Java 类库，以及一些模块等。而 JDK 可以看作是 JRE 的一个超集，提供了更多工具，比如编译器、各种诊断工具等。</li><li><h2 id="Java-是解释执行？"><a href="#Java-是解释执行？" class="headerlink" title="Java 是解释执行？"></a>Java 是解释执行？</h2>对于“Java 是解释执行”这句话，这个说法不太准确。我们开发的 Java 的源代码，首先通过 Javac 编译成为字节码（bytecode），然后，在运行时，通过 Java 虚拟机（JVM）内嵌的解释器将字节码转换成为最终的机器码。但是常见的 JVM，比如我们大多数情况使用的 Oracle JDK 提供的 Hotspot JVM，都提供了 JIT（Just-In-Time）编译器，也就是通常所说的动态编译器，JIT 能够在运行时将热点代码编译成机器码，这种情况下部分热点代码就属于</li><li><h2 id="一次编译、到处运行"><a href="#一次编译、到处运行" class="headerlink" title="一次编译、到处运行"></a>一次编译、到处运行</h2>“<strong>一次编译、到处运行</strong>”说的是 Java 语言跨平台的特性，Java 的跨平台特性与 Java 虚拟机的存在密不可分，可在不同的环境中运行。比如说 Windows 平台和 Linux 平台都有相应的 JDK ，安装好 JDK后也就有了 Java 语言的运行环境。其实 Java 语言本身与其他的编程语言没有特别大的差异，并不是说 Java 语言可以跨平台，而是在不同的平台都有可以让 Java 语言运行的环境而已，所以才有了 Java 一次编译，到处运行这样的效果。<br>严格的讲，跨平台的语言不止 Java 一种，但 Java 是较为成熟的一种。“<strong>一次编译，到处运行</strong>”这种效果跟编译器有关。编程语言的处理需要编译器和解释器。Java 虚拟机和 DOS 类似，相当于一个供程序运行的平台。<br>程序从源代码到运行的三个阶段：编码——编译——运行——调试。Java 在编译阶段则体现了跨平台的特点。编译过程大概是这样的：首先是将 Java 源代码转化成 .CLASS 文件字节码，这是第一次编译。.class 文件就是可以到处运行的文件。然后Java字节码会被转化为目标机器代码，这是是由 JVM 来执行的，即 Java 的第二次编译。</li><li><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2>“<strong>到处运行</strong>”的关键和前提就是 JVM 。因为在第二次编译中 JVM 起着关键作用。在可以运行 Java 虚拟机的地方都内含着一个JVM操作系统。从而使 JAVA 提供了各种不同平台上的虚拟机制，因此实现了“到处运行”的效果。需要强调的一点是，java 并不是编译机制，而是解释机制。Java 字节码的设计充分考虑了 JIT 这一即时编译方式，可以将字节码直接转化成高性能的本地机器码，这同样是虚拟机的一个构成部分。</li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>下面是一位大牛总结的蓝图，很全面，可以参考一下：<br><img src="/images/illustration/java.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-04-06/start.jpg&quot; alt&gt;&lt;br&gt;从接触 Java 开发到现在，你觉得你对 Java 最直观的印象是什么？是它宣传的 “Write once, run anywhere”，还是目前看已经有些过于形式主义的语法？&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://zhouyannian.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://zhouyannian.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhouyannian.com/2019/03/31/hello-world/"/>
    <id>https://zhouyannian.com/2019/03/31/hello-world/</id>
    <published>2019-03-30T17:07:57.333Z</published>
    <updated>2019-04-08T16:32:42.650Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
